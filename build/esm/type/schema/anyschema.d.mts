import type { TAny } from '../any';
import type { TArray } from '../array';
import type { TAsyncIterator } from '../async-iterator';
import type { TBigInt } from '../bigint';
import type { TBoolean } from '../boolean';
import type { TConstructor } from '../constructor';
import type { TDate } from '../date';
import type { TEnum } from '../enum';
import type { TFunction } from '../function';
import type { TInteger } from '../integer';
import type { TIntersect } from '../intersect';
import type { TIterator } from '../iterator';
import type { TLiteral } from '../literal';
import type { TNot } from '../not';
import type { TNull } from '../null';
import type { TNumber } from '../number';
import type { TObject } from '../object';
import type { TPromise } from '../promise';
import type { TRecord } from '../record';
import type { TThis } from '../recursive';
import type { TRef } from '../ref';
import type { TRegExp } from '../regexp';
import type { TString } from '../string';
import type { TSymbol } from '../symbol';
import type { TTemplateLiteral } from '../template-literal';
import type { TTuple } from '../tuple';
import type { TUint8Array } from '../uint8array';
import type { TUndefined } from '../undefined';
import type { TUnion } from '../union';
import type { TUnknown } from '../unknown';
import type { TVoid } from '../void';
import type { TSchema } from './schema.js';
export type TAnySchema = TSchema | TAny | TArray | TAsyncIterator | TBigInt | TBoolean | TConstructor | TDate | TEnum | TFunction | TInteger | TIntersect | TIterator | TLiteral | TNot | TNull | TNumber | TObject | TPromise | TRecord | TRef | TRegExp | TString | TSymbol | TTemplateLiteral | TThis | TTuple | TUndefined | TUnion | TUint8Array | TUnknown | TVoid;
